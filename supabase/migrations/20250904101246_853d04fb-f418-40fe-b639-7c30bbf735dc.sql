-- –°–æ–∑–¥–∞–µ–º —Ç–∏–ø—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ö–≠–ú–ü
CREATE TYPE public.reward_type AS ENUM ('zakal', 'gran', 'shram', 'totem');
CREATE TYPE public.zakal_subtype AS ENUM ('bjj', 'kick', 'ofp');
CREATE TYPE public.shram_subtype AS ENUM ('bjj', 'kick', 'ofp', 'tactics');
CREATE TYPE public.totem_type AS ENUM ('snake', 'paw', 'hammer', 'star', 'sprout', 'compass', 'monk', 'blade', 'lighthouse', 'bear');

-- –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –ö–≠–ú–ü
CREATE TABLE public.kamp_activities (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  participant_id UUID NOT NULL REFERENCES public.participants(id) ON DELETE CASCADE,
  reward_type public.reward_type NOT NULL,
  zakal_subtype public.zakal_subtype,
  shram_subtype public.shram_subtype,
  points INTEGER NOT NULL DEFAULT 1,
  multiplier DECIMAL(3,1) DEFAULT 1.0,
  description TEXT,
  verified_by TEXT, -- –∫—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª (—Ç—Ä–µ–Ω–µ—Ä/–∫—É—Ä–∞—Ç–æ—Ä)
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  activity_date DATE NOT NULL DEFAULT CURRENT_DATE
);

-- –¢–∞–±–ª–∏—Ü–∞ —Ç–æ—Ç–µ–º–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
CREATE TABLE public.participant_totems (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  participant_id UUID NOT NULL REFERENCES public.participants(id) ON DELETE CASCADE,
  totem_type public.totem_type NOT NULL,
  earned_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  requirements_met JSONB, -- –∫–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
  UNIQUE(participant_id, totem_type)
);

-- –¢–∞–±–ª–∏—Ü–∞ –∞—Å–∫–µ–∑
CREATE TABLE public.participant_ascetics (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  participant_id UUID NOT NULL REFERENCES public.participants(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  description TEXT,
  duration_days INTEGER NOT NULL DEFAULT 14,
  start_date DATE NOT NULL,
  end_date DATE NOT NULL,
  completion_percentage INTEGER DEFAULT 0,
  is_completed BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∞—Å–∫–µ–∑ (–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç–º–µ—Ç–∫–∏)
CREATE TABLE public.ascetic_progress (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  ascetic_id UUID NOT NULL REFERENCES public.participant_ascetics(id) ON DELETE CASCADE,
  date DATE NOT NULL,
  completed BOOLEAN DEFAULT FALSE,
  notes TEXT,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),
  UNIQUE(ascetic_id, date)
);

-- –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è —Ç–æ—Ç–µ–º–æ–≤
CREATE TABLE public.totem_requirements (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  totem_type public.totem_type NOT NULL UNIQUE,
  name TEXT NOT NULL,
  description TEXT,
  icon TEXT,
  requirements JSONB NOT NULL, -- —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()
);

-- –í–∫–ª—é—á–∞–µ–º RLS
ALTER TABLE public.kamp_activities ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.participant_totems ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.participant_ascetics ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.ascetic_progress ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.totem_requirements ENABLE ROW LEVEL SECURITY;

-- –ü–æ–ª–∏—Ç–∏–∫–∏ RLS –¥–ª—è kamp_activities
CREATE POLICY "Users can view their own kamp activities" 
ON public.kamp_activities 
FOR SELECT 
USING (participant_id IN (SELECT id FROM public.participants WHERE user_id = auth.uid()));

CREATE POLICY "Trainers can insert kamp activities" 
ON public.kamp_activities 
FOR INSERT 
WITH CHECK (true); -- –ü–æ–∫–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º, –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ —Ä–æ–ª—è–º

-- –ü–æ–ª–∏—Ç–∏–∫–∏ RLS –¥–ª—è participant_totems
CREATE POLICY "Users can view their own totems" 
ON public.participant_totems 
FOR SELECT 
USING (participant_id IN (SELECT id FROM public.participants WHERE user_id = auth.uid()));

CREATE POLICY "Public read access for totem requirements" 
ON public.totem_requirements 
FOR SELECT 
USING (true);

-- –ü–æ–ª–∏—Ç–∏–∫–∏ RLS –¥–ª—è –∞—Å–∫–µ–∑
CREATE POLICY "Users can manage their own ascetics" 
ON public.participant_ascetics 
FOR ALL 
USING (participant_id IN (SELECT id FROM public.participants WHERE user_id = auth.uid()))
WITH CHECK (participant_id IN (SELECT id FROM public.participants WHERE user_id = auth.uid()));

CREATE POLICY "Users can manage their own ascetic progress" 
ON public.ascetic_progress 
FOR ALL 
USING (ascetic_id IN (
  SELECT id FROM public.participant_ascetics 
  WHERE participant_id IN (SELECT id FROM public.participants WHERE user_id = auth.uid())
))
WITH CHECK (ascetic_id IN (
  SELECT id FROM public.participant_ascetics 
  WHERE participant_id IN (SELECT id FROM public.participants WHERE user_id = auth.uid())
));

-- –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–æ—Ç–µ–º–æ–≤
INSERT INTO public.totem_requirements (totem_type, name, description, icon, requirements) VALUES
('snake', '–ó–º–µ–π', '–¢–æ—Ç–µ–º –∑–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ë–ñ–ñ (–∫–æ–Ω—Ç—Ä–æ–ª—å)', 'üêç', '{"zakal_bjj": 8, "shram_bjj": 1, "attendance": 80}'),
('paw', '–õ–∞–ø–∞', '–¢–æ—Ç–µ–º –∑–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ö–∏–∫–±–æ–∫—Å–∏–Ω–≥ (—É–¥–∞—Ä)', 'üêæ', '{"zakal_kick": 8, "shram_kick": 1, "attendance": 80}'),
('hammer', '–ú–æ–ª–æ—Ç', '–¢–æ—Ç–µ–º –∑–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –û–§–ü (—Å–∏–ª–∞)', 'üî®', '{"zakal_ofp": 8, "shram_ofp": 1, "attendance": 80}'),
('star', '–ó–≤–µ–∑–¥–∞', '–¢–æ—Ç–µ–º –∑–∞ –ü–∏—Ä–∞–º–∏–¥—É –ö–≠–ú–ü (–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å)', '‚≠ê', '{"lectures": 6, "homework": 6, "min_score": 11}'),
('sprout', '–†–æ—Å—Ç–æ–∫', '–¢–æ—Ç–µ–º –∑–∞ –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏—é (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ)', 'üå±', '{"lectures": 6, "homework": 6, "min_score": 11}'),
('compass', '–ö–æ–º–ø–∞—Å', '–¢–æ—Ç–µ–º –∑–∞ –¢–∞–∫—Ç–∏–∫—É (–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)', 'üß≠', '{"tactics_sessions": 3, "score": 9}'),
('monk', '–ú–æ–Ω–∞—Ö', '–¢–æ—Ç–µ–º –∑–∞ –ê—Å–∫–µ–∑—ã/—á–µ–ª–ª–µ–Ω–¥–∂–∏ (—Å–∞–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å)', 'üßò', '{"ascetics": 2, "duration_days": 14, "completion": 85}'),
('blade', '–ö–ª–∏–Ω–æ–∫', '–¢–æ—Ç–µ–º –∑–∞ –≤—Å–µ –ò—Å–ø—ã—Ç–∞–Ω–∏—è (—à—Ä–∞–º)', '‚öîÔ∏è', '{"shram_bjj": 1, "shram_kick": 1, "shram_ofp": 1, "min_score": 20}'),
('lighthouse', '–ú–∞—è–∫', '–û—Å–æ–±—ã–π —Ç–æ—Ç–µ–º –∑–∞ –≤–∫–ª–∞–¥/—Å–ª—É–∂–µ–Ω–∏–µ –∫–ª—É–±—É', 'üèÆ', '{"special": true, "admin_only": true}'),
('bear', '–ú–µ–¥–≤–µ–¥—å', '–°—É–ø–µ—Ä-—Ç–æ—Ç–µ–º –∑–∞ –æ—Å–æ–±—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è', 'üêª', '{"special": true, "admin_only": true}');

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
CREATE OR REPLACE FUNCTION public.calculate_participant_progress(p_participant_id UUID)
RETURNS JSONB
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  result JSONB := '{}';
  zakal_bjj_count INTEGER := 0;
  zakal_kick_count INTEGER := 0;
  zakal_ofp_count INTEGER := 0;
  gran_count INTEGER := 0;
  shram_bjj_count INTEGER := 0;
  shram_kick_count INTEGER := 0;
  shram_ofp_count INTEGER := 0;
  shram_tactics_count INTEGER := 0;
  total_points INTEGER := 0;
BEGIN
  -- –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–ª—ã
  SELECT COUNT(*) INTO zakal_bjj_count 
  FROM public.kamp_activities 
  WHERE participant_id = p_participant_id AND reward_type = 'zakal' AND zakal_subtype = 'bjj';
  
  SELECT COUNT(*) INTO zakal_kick_count 
  FROM public.kamp_activities 
  WHERE participant_id = p_participant_id AND reward_type = 'zakal' AND zakal_subtype = 'kick';
  
  SELECT COUNT(*) INTO zakal_ofp_count 
  FROM public.kamp_activities 
  WHERE participant_id = p_participant_id AND reward_type = 'zakal' AND zakal_subtype = 'ofp';
  
  -- –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≥—Ä–∞–Ω–∏
  SELECT COUNT(*) INTO gran_count 
  FROM public.kamp_activities 
  WHERE participant_id = p_participant_id AND reward_type = 'gran';
  
  -- –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —à—Ä–∞–º—ã
  SELECT COUNT(*) INTO shram_bjj_count 
  FROM public.kamp_activities 
  WHERE participant_id = p_participant_id AND reward_type = 'shram' AND shram_subtype = 'bjj';
  
  SELECT COUNT(*) INTO shram_kick_count 
  FROM public.kamp_activities 
  WHERE participant_id = p_participant_id AND reward_type = 'shram' AND shram_subtype = 'kick';
  
  SELECT COUNT(*) INTO shram_ofp_count 
  FROM public.kamp_activities 
  WHERE participant_id = p_participant_id AND reward_type = 'shram' AND shram_subtype = 'ofp';
  
  SELECT COUNT(*) INTO shram_tactics_count 
  FROM public.kamp_activities 
  WHERE participant_id = p_participant_id AND reward_type = 'shram' AND shram_subtype = 'tactics';
  
  -- –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ –±–∞–ª–ª—ã
  SELECT COALESCE(SUM(points * multiplier), 0)::INTEGER INTO total_points 
  FROM public.kamp_activities 
  WHERE participant_id = p_participant_id;
  
  result := jsonb_build_object(
    'zakal_bjj', zakal_bjj_count,
    'zakal_kick', zakal_kick_count,
    'zakal_ofp', zakal_ofp_count,
    'gran', gran_count,
    'shram_bjj', shram_bjj_count,
    'shram_kick', shram_kick_count,
    'shram_ofp', shram_ofp_count,
    'shram_tactics', shram_tactics_count,
    'total_points', total_points
  );
  
  RETURN result;
END;
$$;